from loguru import logger

from emma_experience_hub.datamodels.simbot import SimBotIntent, SimBotIntentType
from emma_experience_hub.parsers.parser import NeuralParser


class SimBotNLUOutputParser(NeuralParser[SimBotIntent]):
    """Convert the output from the SimBot NLU module to a SimBot intent."""

    def __init__(self, intent_type_delimiter: str) -> None:
        self._intent_type_delimiter = intent_type_delimiter

    def __call__(self, output_text: str) -> SimBotIntent:
        """Parses the intent generated by the NLU component.

        The model is trained with the following templates:
            - <act>
            - <clarify><direction>
            - <clarify><decription> object_name
            - <clarify><disambiguation> object_name
            - <clarify><location> object_name
        """
        logger.debug(f"NLU output text: `{output_text}`")

        # Split the raw output text by the given delimiter. We assume it's a " " separating the
        # special tokens and the object_name.
        split_parts = output_text.split(self._intent_type_delimiter)

        # Get the intent type from the left-side of the template.
        intent_type = SimBotIntentType(split_parts[0])

        # If it exists, get the object name from the right-side of the template
        object_name = " ".join(split_parts[1:]) if len(split_parts) > 1 else None

        return SimBotIntent(type=intent_type, entity=object_name)
