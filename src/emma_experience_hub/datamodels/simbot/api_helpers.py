from emma_experience_hub.datamodels.emma import DialogueUtterance
from emma_experience_hub.datamodels.simbot.intents import SimBotIntentType


def update_simbot_intents_for_emma_policy(  # noqa: WPS231
    utterances: list[DialogueUtterance],
) -> list[DialogueUtterance]:
    """Update the intents to be compatible with the EmmaPolicy model API.

    I do not know how to simplify this further without making it harder to read, so there is a noqa
    for a high cognitive complexity.
    """
    updated_utterances: list[DialogueUtterance] = []
    clarification_chain: list[DialogueUtterance] = []
    end_of_chain = False

    for utterance in utterances:
        # if you have finalised the clarification chain, commit
        if clarification_chain and end_of_chain:
            updated_utterances.extend(clarification_chain)
            clarification_chain.clear()
            end_of_chain = False

        if not utterance.intent:
            raise ValueError("Utterance intent is None. This shouldn't be the case!")

        intent = SimBotIntentType[utterance.intent]

        edited_utterance = utterance.copy()

        # deal with current turn and decided whether it's part of a clarification chain or not
        # clarifications are initiated by a user instruction
        if utterance.role == "user":
            if intent.is_clarification_question:
                # this is the beginning of the clarification chain
                edited_utterance.intent = SimBotIntentType.instruction.name
                clarification_chain.append(edited_utterance)
            elif clarification_chain:
                # if we already have elements in the chain, this is the end of the chain
                edited_utterance.intent = SimBotIntentType.clarify_answer.name
                clarification_chain.append(edited_utterance)
                end_of_chain = True
            else:
                # if we don't have a clarification, this is an instruction
                if intent.is_instruction:
                    edited_utterance.intent = SimBotIntentType.instruction.name
                updated_utterances.append(edited_utterance)
        elif clarification_chain:
            # if we have a clarification chain open, this is the question generated by the agent
            edited_utterance.intent = SimBotIntentType.clarify_question.name
            clarification_chain.append(edited_utterance)
        else:
            # otherwise, this is a response generated by the agent and gets added as is
            updated_utterances.append(utterance)

    if clarification_chain:
        # finally, push any remaining utterance that was initially added to the clarification chain
        updated_utterances.extend(clarification_chain)
        clarification_chain.clear()

    return updated_utterances
